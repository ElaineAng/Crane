// Code generated by protoc-gen-go. DO NOT EDIT.
// source: CMessage.proto

package CraneMessage

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TupleType int32

const (
	TupleType_INT    TupleType = 0
	TupleType_FLOAT  TupleType = 1
	TupleType_STRING TupleType = 2
)

var TupleType_name = map[int32]string{
	0: "INT",
	1: "FLOAT",
	2: "STRING",
}

var TupleType_value = map[string]int32{
	"INT":    0,
	"FLOAT":  1,
	"STRING": 2,
}

func (x TupleType) String() string {
	return proto.EnumName(TupleType_name, int32(x))
}

func (TupleType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6e27c553695ec813, []int{0}
}

type CompType int32

const (
	CompType_SPOUT CompType = 0
	CompType_BOLT  CompType = 1
)

var CompType_name = map[int32]string{
	0: "SPOUT",
	1: "BOLT",
}

var CompType_value = map[string]int32{
	"SPOUT": 0,
	"BOLT":  1,
}

func (x CompType) String() string {
	return proto.EnumName(CompType_name, int32(x))
}

func (CompType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6e27c553695ec813, []int{1}
}

type OpStatus int32

const (
	OpStatus_OK  OpStatus = 0
	OpStatus_FIN OpStatus = 1
	OpStatus_STA OpStatus = 2
)

var OpStatus_name = map[int32]string{
	0: "OK",
	1: "FIN",
	2: "STA",
}

var OpStatus_value = map[string]int32{
	"OK":  0,
	"FIN": 1,
	"STA": 2,
}

func (x OpStatus) String() string {
	return proto.EnumName(OpStatus_name, int32(x))
}

func (OpStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6e27c553695ec813, []int{2}
}

type Node struct {
	HostName             string   `protobuf:"bytes,1,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	HostIp               string   `protobuf:"bytes,2,opt,name=host_ip,json=hostIp,proto3" json:"host_ip,omitempty"`
	Port                 int64    `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e27c553695ec813, []int{0}
}

func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *Node) GetHostIp() string {
	if m != nil {
		return m.HostIp
	}
	return ""
}

func (m *Node) GetPort() int64 {
	if m != nil {
		return m.Port
	}
	return 0
}

type Component struct {
	ItemName             string   `protobuf:"bytes,1,opt,name=item_name,json=itemName,proto3" json:"item_name,omitempty"`
	Ip                   string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 int64    `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Component) Reset()         { *m = Component{} }
func (m *Component) String() string { return proto.CompactTextString(m) }
func (*Component) ProtoMessage()    {}
func (*Component) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e27c553695ec813, []int{1}
}

func (m *Component) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Component.Unmarshal(m, b)
}
func (m *Component) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Component.Marshal(b, m, deterministic)
}
func (m *Component) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Component.Merge(m, src)
}
func (m *Component) XXX_Size() int {
	return xxx_messageInfo_Component.Size(m)
}
func (m *Component) XXX_DiscardUnknown() {
	xxx_messageInfo_Component.DiscardUnknown(m)
}

var xxx_messageInfo_Component proto.InternalMessageInfo

func (m *Component) GetItemName() string {
	if m != nil {
		return m.ItemName
	}
	return ""
}

func (m *Component) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Component) GetPort() int64 {
	if m != nil {
		return m.Port
	}
	return 0
}

type TopoItem struct {
	ComponentType CompType   `protobuf:"varint,1,opt,name=component_type,json=componentType,proto3,enum=CraneMessage.CompType" json:"component_type,omitempty"`
	Myself        *Component `protobuf:"bytes,2,opt,name=myself,proto3" json:"myself,omitempty"`
	FuncName      string     `protobuf:"bytes,3,opt,name=func_name,json=funcName,proto3" json:"func_name,omitempty"`
	// grouping contains a list of item_names where this item sends data to
	Grouping             []*Component `protobuf:"bytes,4,rep,name=grouping,proto3" json:"grouping,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TopoItem) Reset()         { *m = TopoItem{} }
func (m *TopoItem) String() string { return proto.CompactTextString(m) }
func (*TopoItem) ProtoMessage()    {}
func (*TopoItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e27c553695ec813, []int{2}
}

func (m *TopoItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TopoItem.Unmarshal(m, b)
}
func (m *TopoItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TopoItem.Marshal(b, m, deterministic)
}
func (m *TopoItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopoItem.Merge(m, src)
}
func (m *TopoItem) XXX_Size() int {
	return xxx_messageInfo_TopoItem.Size(m)
}
func (m *TopoItem) XXX_DiscardUnknown() {
	xxx_messageInfo_TopoItem.DiscardUnknown(m)
}

var xxx_messageInfo_TopoItem proto.InternalMessageInfo

func (m *TopoItem) GetComponentType() CompType {
	if m != nil {
		return m.ComponentType
	}
	return CompType_SPOUT
}

func (m *TopoItem) GetMyself() *Component {
	if m != nil {
		return m.Myself
	}
	return nil
}

func (m *TopoItem) GetFuncName() string {
	if m != nil {
		return m.FuncName
	}
	return ""
}

func (m *TopoItem) GetGrouping() []*Component {
	if m != nil {
		return m.Grouping
	}
	return nil
}

type Topology struct {
	JobBinName           string      `protobuf:"bytes,1,opt,name=job_bin_name,json=jobBinName,proto3" json:"job_bin_name,omitempty"`
	Components           []*TopoItem `protobuf:"bytes,2,rep,name=components,proto3" json:"components,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Topology) Reset()         { *m = Topology{} }
func (m *Topology) String() string { return proto.CompactTextString(m) }
func (*Topology) ProtoMessage()    {}
func (*Topology) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e27c553695ec813, []int{3}
}

func (m *Topology) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Topology.Unmarshal(m, b)
}
func (m *Topology) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Topology.Marshal(b, m, deterministic)
}
func (m *Topology) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Topology.Merge(m, src)
}
func (m *Topology) XXX_Size() int {
	return xxx_messageInfo_Topology.Size(m)
}
func (m *Topology) XXX_DiscardUnknown() {
	xxx_messageInfo_Topology.DiscardUnknown(m)
}

var xxx_messageInfo_Topology proto.InternalMessageInfo

func (m *Topology) GetJobBinName() string {
	if m != nil {
		return m.JobBinName
	}
	return ""
}

func (m *Topology) GetComponents() []*TopoItem {
	if m != nil {
		return m.Components
	}
	return nil
}

type Tuple struct {
	TupleT               []TupleType `protobuf:"varint,1,rep,packed,name=tuple_t,json=tupleT,proto3,enum=CraneMessage.TupleType" json:"tuple_t,omitempty"`
	IntField             []int64     `protobuf:"varint,2,rep,packed,name=int_field,json=intField,proto3" json:"int_field,omitempty"`
	DoubleField          []float64   `protobuf:"fixed64,3,rep,packed,name=double_field,json=doubleField,proto3" json:"double_field,omitempty"`
	StringField          []string    `protobuf:"bytes,4,rep,name=string_field,json=stringField,proto3" json:"string_field,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Tuple) Reset()         { *m = Tuple{} }
func (m *Tuple) String() string { return proto.CompactTextString(m) }
func (*Tuple) ProtoMessage()    {}
func (*Tuple) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e27c553695ec813, []int{4}
}

func (m *Tuple) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tuple.Unmarshal(m, b)
}
func (m *Tuple) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tuple.Marshal(b, m, deterministic)
}
func (m *Tuple) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tuple.Merge(m, src)
}
func (m *Tuple) XXX_Size() int {
	return xxx_messageInfo_Tuple.Size(m)
}
func (m *Tuple) XXX_DiscardUnknown() {
	xxx_messageInfo_Tuple.DiscardUnknown(m)
}

var xxx_messageInfo_Tuple proto.InternalMessageInfo

func (m *Tuple) GetTupleT() []TupleType {
	if m != nil {
		return m.TupleT
	}
	return nil
}

func (m *Tuple) GetIntField() []int64 {
	if m != nil {
		return m.IntField
	}
	return nil
}

func (m *Tuple) GetDoubleField() []float64 {
	if m != nil {
		return m.DoubleField
	}
	return nil
}

func (m *Tuple) GetStringField() []string {
	if m != nil {
		return m.StringField
	}
	return nil
}

type OpResponse struct {
	Status               OpStatus `protobuf:"varint,1,opt,name=status,proto3,enum=CraneMessage.OpStatus" json:"status,omitempty"`
	RetMessage           string   `protobuf:"bytes,2,opt,name=ret_message,json=retMessage,proto3" json:"ret_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpResponse) Reset()         { *m = OpResponse{} }
func (m *OpResponse) String() string { return proto.CompactTextString(m) }
func (*OpResponse) ProtoMessage()    {}
func (*OpResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e27c553695ec813, []int{5}
}

func (m *OpResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpResponse.Unmarshal(m, b)
}
func (m *OpResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpResponse.Marshal(b, m, deterministic)
}
func (m *OpResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpResponse.Merge(m, src)
}
func (m *OpResponse) XXX_Size() int {
	return xxx_messageInfo_OpResponse.Size(m)
}
func (m *OpResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OpResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OpResponse proto.InternalMessageInfo

func (m *OpResponse) GetStatus() OpStatus {
	if m != nil {
		return m.Status
	}
	return OpStatus_OK
}

func (m *OpResponse) GetRetMessage() string {
	if m != nil {
		return m.RetMessage
	}
	return ""
}

type FailureReportRequest struct {
	FailedNode           *Node    `protobuf:"bytes,1,opt,name=failed_node,json=failedNode,proto3" json:"failed_node,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FailureReportRequest) Reset()         { *m = FailureReportRequest{} }
func (m *FailureReportRequest) String() string { return proto.CompactTextString(m) }
func (*FailureReportRequest) ProtoMessage()    {}
func (*FailureReportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e27c553695ec813, []int{6}
}

func (m *FailureReportRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FailureReportRequest.Unmarshal(m, b)
}
func (m *FailureReportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FailureReportRequest.Marshal(b, m, deterministic)
}
func (m *FailureReportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FailureReportRequest.Merge(m, src)
}
func (m *FailureReportRequest) XXX_Size() int {
	return xxx_messageInfo_FailureReportRequest.Size(m)
}
func (m *FailureReportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FailureReportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FailureReportRequest proto.InternalMessageInfo

func (m *FailureReportRequest) GetFailedNode() *Node {
	if m != nil {
		return m.FailedNode
	}
	return nil
}

type OpRequest struct {
	Status               OpStatus `protobuf:"varint,1,opt,name=status,proto3,enum=CraneMessage.OpStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpRequest) Reset()         { *m = OpRequest{} }
func (m *OpRequest) String() string { return proto.CompactTextString(m) }
func (*OpRequest) ProtoMessage()    {}
func (*OpRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e27c553695ec813, []int{7}
}

func (m *OpRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpRequest.Unmarshal(m, b)
}
func (m *OpRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpRequest.Marshal(b, m, deterministic)
}
func (m *OpRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpRequest.Merge(m, src)
}
func (m *OpRequest) XXX_Size() int {
	return xxx_messageInfo_OpRequest.Size(m)
}
func (m *OpRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OpRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OpRequest proto.InternalMessageInfo

func (m *OpRequest) GetStatus() OpStatus {
	if m != nil {
		return m.Status
	}
	return OpStatus_OK
}

func init() {
	proto.RegisterEnum("CraneMessage.TupleType", TupleType_name, TupleType_value)
	proto.RegisterEnum("CraneMessage.CompType", CompType_name, CompType_value)
	proto.RegisterEnum("CraneMessage.OpStatus", OpStatus_name, OpStatus_value)
	proto.RegisterType((*Node)(nil), "CraneMessage.Node")
	proto.RegisterType((*Component)(nil), "CraneMessage.Component")
	proto.RegisterType((*TopoItem)(nil), "CraneMessage.TopoItem")
	proto.RegisterType((*Topology)(nil), "CraneMessage.Topology")
	proto.RegisterType((*Tuple)(nil), "CraneMessage.Tuple")
	proto.RegisterType((*OpResponse)(nil), "CraneMessage.OpResponse")
	proto.RegisterType((*FailureReportRequest)(nil), "CraneMessage.FailureReportRequest")
	proto.RegisterType((*OpRequest)(nil), "CraneMessage.OpRequest")
}

func init() { proto.RegisterFile("CMessage.proto", fileDescriptor_6e27c553695ec813) }

var fileDescriptor_6e27c553695ec813 = []byte{
	// 662 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xae, 0xed, 0xd4, 0xb5, 0xc7, 0x69, 0x64, 0x2d, 0x88, 0x5a, 0x70, 0x68, 0xb0, 0x38, 0x44,
	0x45, 0x0a, 0x55, 0x2a, 0x71, 0x41, 0x20, 0x25, 0x15, 0x41, 0x51, 0x4b, 0x5c, 0x6d, 0x5c, 0x71,
	0x42, 0x96, 0x53, 0x6f, 0x82, 0x5b, 0x7b, 0x77, 0xb1, 0xd7, 0x87, 0x3c, 0x02, 0xef, 0xc0, 0x91,
	0xc7, 0xe1, 0xa1, 0xd0, 0xae, 0x93, 0xd0, 0xb4, 0x51, 0x11, 0xbd, 0xcd, 0xce, 0x7c, 0xfe, 0xe6,
	0x9b, 0x3f, 0x43, 0xeb, 0xf4, 0x33, 0x29, 0xcb, 0x78, 0x4e, 0xba, 0xbc, 0x60, 0x82, 0xa1, 0xe6,
	0x69, 0x11, 0x53, 0xb2, 0xf4, 0xf9, 0x17, 0xd0, 0x18, 0xb3, 0x84, 0xa0, 0x17, 0x60, 0x7f, 0x63,
	0xa5, 0x88, 0x68, 0x9c, 0x13, 0x4f, 0x6b, 0x6b, 0x1d, 0x1b, 0x5b, 0xd2, 0x31, 0x8e, 0x73, 0x82,
	0x0e, 0x60, 0x4f, 0x05, 0x53, 0xee, 0xe9, 0x2a, 0x64, 0xca, 0xe7, 0x88, 0x23, 0x04, 0x0d, 0xce,
	0x0a, 0xe1, 0x19, 0x6d, 0xad, 0x63, 0x60, 0x65, 0xfb, 0xe7, 0x60, 0x9f, 0xb2, 0x9c, 0x33, 0x4a,
	0xa8, 0x90, 0xb4, 0xa9, 0x20, 0xf9, 0x06, 0xad, 0x74, 0x28, 0xda, 0x16, 0xe8, 0x6b, 0x46, 0x3d,
	0xdd, 0xce, 0xf6, 0x5b, 0x03, 0x2b, 0x64, 0x9c, 0x8d, 0x04, 0xc9, 0xd1, 0x7b, 0x68, 0x5d, 0xad,
	0xa8, 0x23, 0xb1, 0xe0, 0x35, 0x65, 0xab, 0xf7, 0xac, 0x7b, 0xbb, 0xa6, 0xae, 0x4c, 0x1f, 0x2e,
	0x38, 0xc1, 0xfb, 0x6b, 0xb4, 0x7c, 0xa2, 0x37, 0x60, 0xe6, 0x8b, 0x92, 0x64, 0x33, 0x95, 0xd3,
	0xe9, 0x1d, 0xdc, 0xff, 0x4c, 0x81, 0xf1, 0x12, 0x26, 0xd5, 0xcf, 0x2a, 0x7a, 0x55, 0xab, 0x37,
	0x6a, 0xf5, 0xd2, 0xa1, 0xd4, 0x9f, 0x80, 0x35, 0x2f, 0x58, 0xc5, 0x53, 0x3a, 0xf7, 0x1a, 0x6d,
	0xe3, 0x21, 0xbe, 0x35, 0xd0, 0x4f, 0xea, 0x6a, 0x32, 0x36, 0x5f, 0xa0, 0x36, 0x34, 0xaf, 0xd9,
	0x34, 0x9a, 0xa6, 0xf4, 0x76, 0x7b, 0xe0, 0x9a, 0x4d, 0x07, 0x29, 0x55, 0x29, 0xde, 0x02, 0xac,
	0x2b, 0x28, 0x3d, 0x5d, 0x25, 0xb9, 0x53, 0xeb, 0xaa, 0x37, 0xf8, 0x16, 0xd2, 0xff, 0xa9, 0xc1,
	0x6e, 0x58, 0xf1, 0x8c, 0xa0, 0x63, 0xd8, 0x13, 0xd2, 0x88, 0x84, 0xa7, 0xb5, 0x8d, 0x4e, 0xeb,
	0xae, 0x46, 0x85, 0x52, 0xbd, 0x32, 0x15, 0x2e, 0x54, 0x13, 0xa3, 0x22, 0x9a, 0xa5, 0x24, 0x4b,
	0x54, 0x4a, 0x03, 0x5b, 0x29, 0x15, 0x43, 0xf9, 0x46, 0x2f, 0xa1, 0x99, 0xb0, 0x6a, 0x9a, 0x91,
	0x65, 0xdc, 0x68, 0x1b, 0x1d, 0x0d, 0x3b, 0xb5, 0x6f, 0x0d, 0x29, 0x45, 0x91, 0xd2, 0xf9, 0x12,
	0x22, 0x5b, 0x63, 0x63, 0xa7, 0xf6, 0x29, 0x88, 0xff, 0x15, 0x20, 0xe0, 0x98, 0x94, 0x9c, 0xd1,
	0x92, 0xa0, 0x2e, 0x98, 0xa5, 0x88, 0x45, 0x55, 0x6e, 0x1f, 0x66, 0xc0, 0x27, 0x2a, 0x8a, 0x97,
	0x28, 0x74, 0x08, 0x4e, 0x41, 0x44, 0x94, 0xd7, 0xf1, 0xe5, 0xfa, 0x40, 0x41, 0xc4, 0x6a, 0xa5,
	0xcf, 0xe0, 0xe9, 0x30, 0x4e, 0xb3, 0xaa, 0x20, 0x98, 0xc8, 0x1d, 0xc2, 0xe4, 0x7b, 0x45, 0x4a,
	0x81, 0x4e, 0xc0, 0x99, 0xc5, 0x69, 0x46, 0x92, 0x88, 0xb2, 0xa4, 0x6e, 0xb7, 0xd3, 0x43, 0x9b,
	0xd9, 0xe4, 0x2d, 0x60, 0xa8, 0x61, 0xd2, 0xf6, 0xdf, 0x81, 0x2d, 0xb5, 0xd6, 0x0c, 0xff, 0x29,
	0xf5, 0xe8, 0x35, 0xd8, 0xeb, 0x06, 0xa3, 0x3d, 0x30, 0x46, 0xe3, 0xd0, 0xdd, 0x41, 0x36, 0xec,
	0x0e, 0xcf, 0x83, 0x7e, 0xe8, 0x6a, 0x08, 0xc0, 0x9c, 0x84, 0x78, 0x34, 0xfe, 0xe4, 0xea, 0x47,
	0x87, 0x60, 0xad, 0x16, 0x57, 0x42, 0x26, 0x17, 0xc1, 0xa5, 0x44, 0x5b, 0xd0, 0x18, 0x04, 0xe7,
	0xa1, 0xab, 0x1d, 0xbd, 0x02, 0x6b, 0x95, 0x01, 0x99, 0xa0, 0x07, 0x67, 0xee, 0x8e, 0x24, 0x1d,
	0x8e, 0xc6, 0xae, 0x26, 0x8d, 0x49, 0xd8, 0x77, 0xf5, 0xde, 0x2f, 0x1d, 0x76, 0x95, 0x2a, 0x34,
	0x00, 0xb8, 0xe4, 0x19, 0x8b, 0x13, 0xb9, 0x23, 0x68, 0xcb, 0xde, 0xc8, 0x2d, 0x7c, 0xee, 0xdd,
	0xad, 0x61, 0x35, 0x18, 0x7f, 0xe7, 0x58, 0x43, 0x03, 0x68, 0xf6, 0x93, 0xe4, 0xef, 0x3d, 0x3f,
	0x82, 0x05, 0x05, 0xb0, 0xbf, 0x31, 0x0f, 0xe4, 0x6f, 0x82, 0xb7, 0x0d, 0xeb, 0x41, 0xc2, 0x01,
	0x38, 0x43, 0x42, 0xaf, 0xc8, 0x17, 0x56, 0xdc, 0x90, 0x02, 0x1d, 0xdc, 0x87, 0xfe, 0x93, 0xa3,
	0xf7, 0x43, 0x83, 0x46, 0x18, 0x97, 0x37, 0xe8, 0x03, 0xd8, 0x1f, 0xf3, 0x54, 0xd4, 0xe7, 0xf2,
	0x64, 0xcb, 0x75, 0x3c, 0x44, 0xd3, 0xd1, 0x50, 0x1f, 0x60, 0x22, 0xe2, 0x42, 0x4c, 0x38, 0xab,
	0xc4, 0xa3, 0xb4, 0x4c, 0x4d, 0xf5, 0x63, 0x3e, 0xf9, 0x13, 0x00, 0x00, 0xff, 0xff, 0xac, 0xaa,
	0x95, 0xcb, 0xaa, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CraneClient is the client API for Crane service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CraneClient interface {
	UploadTopo(ctx context.Context, in *Topology, opts ...grpc.CallOption) (Crane_UploadTopoClient, error)
	AddComponent(ctx context.Context, in *Topology, opts ...grpc.CallOption) (*OpResponse, error)
	FailureReport(ctx context.Context, in *FailureReportRequest, opts ...grpc.CallOption) (*OpResponse, error)
	FenceWorker(ctx context.Context, in *OpRequest, opts ...grpc.CallOption) (*OpResponse, error)
}

type craneClient struct {
	cc *grpc.ClientConn
}

func NewCraneClient(cc *grpc.ClientConn) CraneClient {
	return &craneClient{cc}
}

func (c *craneClient) UploadTopo(ctx context.Context, in *Topology, opts ...grpc.CallOption) (Crane_UploadTopoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Crane_serviceDesc.Streams[0], "/CraneMessage.Crane/UploadTopo", opts...)
	if err != nil {
		return nil, err
	}
	x := &craneUploadTopoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Crane_UploadTopoClient interface {
	Recv() (*OpResponse, error)
	grpc.ClientStream
}

type craneUploadTopoClient struct {
	grpc.ClientStream
}

func (x *craneUploadTopoClient) Recv() (*OpResponse, error) {
	m := new(OpResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *craneClient) AddComponent(ctx context.Context, in *Topology, opts ...grpc.CallOption) (*OpResponse, error) {
	out := new(OpResponse)
	err := c.cc.Invoke(ctx, "/CraneMessage.Crane/AddComponent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *craneClient) FailureReport(ctx context.Context, in *FailureReportRequest, opts ...grpc.CallOption) (*OpResponse, error) {
	out := new(OpResponse)
	err := c.cc.Invoke(ctx, "/CraneMessage.Crane/FailureReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *craneClient) FenceWorker(ctx context.Context, in *OpRequest, opts ...grpc.CallOption) (*OpResponse, error) {
	out := new(OpResponse)
	err := c.cc.Invoke(ctx, "/CraneMessage.Crane/FenceWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CraneServer is the server API for Crane service.
type CraneServer interface {
	UploadTopo(*Topology, Crane_UploadTopoServer) error
	AddComponent(context.Context, *Topology) (*OpResponse, error)
	FailureReport(context.Context, *FailureReportRequest) (*OpResponse, error)
	FenceWorker(context.Context, *OpRequest) (*OpResponse, error)
}

func RegisterCraneServer(s *grpc.Server, srv CraneServer) {
	s.RegisterService(&_Crane_serviceDesc, srv)
}

func _Crane_UploadTopo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Topology)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CraneServer).UploadTopo(m, &craneUploadTopoServer{stream})
}

type Crane_UploadTopoServer interface {
	Send(*OpResponse) error
	grpc.ServerStream
}

type craneUploadTopoServer struct {
	grpc.ServerStream
}

func (x *craneUploadTopoServer) Send(m *OpResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Crane_AddComponent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Topology)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CraneServer).AddComponent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CraneMessage.Crane/AddComponent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CraneServer).AddComponent(ctx, req.(*Topology))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crane_FailureReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FailureReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CraneServer).FailureReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CraneMessage.Crane/FailureReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CraneServer).FailureReport(ctx, req.(*FailureReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crane_FenceWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CraneServer).FenceWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CraneMessage.Crane/FenceWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CraneServer).FenceWorker(ctx, req.(*OpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Crane_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CraneMessage.Crane",
	HandlerType: (*CraneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddComponent",
			Handler:    _Crane_AddComponent_Handler,
		},
		{
			MethodName: "FailureReport",
			Handler:    _Crane_FailureReport_Handler,
		},
		{
			MethodName: "FenceWorker",
			Handler:    _Crane_FenceWorker_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadTopo",
			Handler:       _Crane_UploadTopo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "CMessage.proto",
}

// TaskClient is the client API for Task service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaskClient interface {
	EmitTuple(ctx context.Context, opts ...grpc.CallOption) (Task_EmitTupleClient, error)
	StartSpout(ctx context.Context, in *OpRequest, opts ...grpc.CallOption) (*OpResponse, error)
}

type taskClient struct {
	cc *grpc.ClientConn
}

func NewTaskClient(cc *grpc.ClientConn) TaskClient {
	return &taskClient{cc}
}

func (c *taskClient) EmitTuple(ctx context.Context, opts ...grpc.CallOption) (Task_EmitTupleClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Task_serviceDesc.Streams[0], "/CraneMessage.Task/EmitTuple", opts...)
	if err != nil {
		return nil, err
	}
	x := &taskEmitTupleClient{stream}
	return x, nil
}

type Task_EmitTupleClient interface {
	Send(*Tuple) error
	CloseAndRecv() (*OpResponse, error)
	grpc.ClientStream
}

type taskEmitTupleClient struct {
	grpc.ClientStream
}

func (x *taskEmitTupleClient) Send(m *Tuple) error {
	return x.ClientStream.SendMsg(m)
}

func (x *taskEmitTupleClient) CloseAndRecv() (*OpResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(OpResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *taskClient) StartSpout(ctx context.Context, in *OpRequest, opts ...grpc.CallOption) (*OpResponse, error) {
	out := new(OpResponse)
	err := c.cc.Invoke(ctx, "/CraneMessage.Task/StartSpout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServer is the server API for Task service.
type TaskServer interface {
	EmitTuple(Task_EmitTupleServer) error
	StartSpout(context.Context, *OpRequest) (*OpResponse, error)
}

func RegisterTaskServer(s *grpc.Server, srv TaskServer) {
	s.RegisterService(&_Task_serviceDesc, srv)
}

func _Task_EmitTuple_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TaskServer).EmitTuple(&taskEmitTupleServer{stream})
}

type Task_EmitTupleServer interface {
	SendAndClose(*OpResponse) error
	Recv() (*Tuple, error)
	grpc.ServerStream
}

type taskEmitTupleServer struct {
	grpc.ServerStream
}

func (x *taskEmitTupleServer) SendAndClose(m *OpResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *taskEmitTupleServer) Recv() (*Tuple, error) {
	m := new(Tuple)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Task_StartSpout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).StartSpout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CraneMessage.Task/StartSpout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).StartSpout(ctx, req.(*OpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Task_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CraneMessage.Task",
	HandlerType: (*TaskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartSpout",
			Handler:    _Task_StartSpout_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EmitTuple",
			Handler:       _Task_EmitTuple_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "CMessage.proto",
}
